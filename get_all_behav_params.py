# -*- coding: utf-8 -*-
"""get_all_behav_params.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FzVwcZZJRbH2k0zwKE4ETniJyjt11Bvy
"""

# this code is to give behavioral parameters of every mouse session in the google drive folder
# after getting this, we can run another script to get more specific sessions to run (ex. nonbiased, naive mice with enough clean trials and good imaging quality only)

from google.colab import drive
drive.mount('/content/drive')

#TEST ONLY
import os
import glob
import pandas as pd
import math
import numpy as np
import re

import pandas as pd
# exclude: m17r, m8l, m18ll, ~m27l

#basepath = r'E:\google_drive\Calcium_imaging_yarm_LurLab\mice_datasets' #desktop
basepath = r'/content/drive/MyDrive/Calcium_imaging_yarm_LurLab/mice_datasets'
#mice = ['m2r','m9r','m11n','m12lr','m13l','m14r','m15n','m16l','m19n','m21r','m22l','m23r','m25lr','m26r','m29n', 'm30lr', 'm31r','m32l','m33r','m34n','min4r','sn','snr']

mice = ['m2r','m9r','m11n','m12lr','m13l','m14r','m15n','m16l','m17r','m19n','m21r','m22l','m23r','m25lr','m26r','m27l','m29n', 'm30lr', 'm31r','m32l','m33r','m34n','m36rr','m37l','m38n','m39rr','m40l', 'm41r','min4r','sn','snr'] #all
#mice = ['m2r','m9r','m12lr','m13l','m14r','m15n','m16l','m19n','m22l','m23r','m25lr','m26r', 'm30lr', 'm31r','m32l','m33r', 'min4r','sn','snr'] #m11n, m17r, m21r, m8l, m18ll #m27l #m29n #m34n #main
#mice = ['m2r','m9r','m11n','m12lr','m13l','m14r','m15n','m16l','m17r','m19n','m21r','m22l','m23r','m25lr','m26r','m27l','min4r','sn','snr']
#mice = ['m2r','m9r','m12lr','m13l','m14r','m15n','m16l','m19n','m22l','m23r','m25lr','m26r','min4r','sn','snr'] #m11n, m17r, m21r, m8l, m18ll #m27l #main

stage = 's2'

def getsubfolders(folder):
    ''' returns list of subfolders '''
    return [os.path.join(folder,p) for p in os.listdir(folder) if os.path.isdir(os.path.join(folder,p))]

# Initialize the DataFrame with the columns you specified
columns = ['mouseID', 'stage', 'sessionID', 'per_lc', 'per_rc', 'behav', 'nclean_trials']
df = pd.DataFrame(columns=columns)

mouse_session_info_dict = {}
for m in mice:
    import os
    import glob
    import pandas as pd
    import math
    import numpy as np
    import re

    #0 for no, 1 for yes
    if stage == 's2':
      init_only = 1
    else:
      init_only = 0

    basefolders = []
    temp = []
    subfolders=getsubfolders(basepath)

    for subfolder in subfolders:
      subfolders=getsubfolders(subfolder)
      #if m in subfolder:
      pattern = r'\b{}\b'.format(re.escape(m))
      if re.search(pattern, subfolder):
        for subfolder in subfolders:
          subfolders=getsubfolders(subfolder)
          pattern2 = r'\b{}\b'.format(re.escape(stage))
          if re.search(pattern2, subfolder):
            for subfolder in subfolders:
              subfolders=getsubfolders(subfolder)
              temp.append(subfolder)

    param_paths = []
    for file in temp:
        param_paths.append(glob.glob(file + '/trial_parameters' + '*.csv'))

    session_info_list = []
    for i in range(len(param_paths)):
      try:
        current_folder = temp[i]
        params = pd.read_csv(param_paths[i][0])

        #get behav
        if init_only == 0:
          behav = (params['correctness'] == 'correct').sum() / len(params)
        else:
          init = params[params['mode']=='INIT']
          behav = (init['correctness'] == 'correct').sum() / len(init)

        #get per_lc, per_rc for bias later
        if stage == 's0':
          l_count = (params['direction']=='L').sum()
          r_count = (params['direction']=='R').sum()
        else:
          lc_count = ((params['direction'] == 'L') & (params['correctness'] == 'correct')).sum()
          lw_count = ((params['direction'] == 'L') & (params['correctness'] == 'wrong')).sum()
          rc_count = ((params['direction'] == 'R') & (params['correctness'] == 'correct')).sum()
          rw_count = ((params['direction'] == 'R') & (params['correctness'] == 'wrong')).sum()
          per_lc = lc_count / (lc_count + lw_count)
          per_rc = rc_count / (rc_count + rw_count)

        #get ncleantrials
        clean_count = (params['clarity']=='clean').sum()

        # Create a dictionary with session information
        session_info = {
            'mouseID': m,
            'stage': stage,
            'sessionID': current_folder,
            'behav': behav,
            'per_lc':per_lc,
            'per_rc':per_rc,
            'nclean_trials':clean_count,
        }

        session_info_list.append(session_info)
      except:
        pass
        # Add the session information to the DataFrame
    df = df.append(session_info_list, ignore_index=True)

df.to_csv(r'/content/drive/MyDrive/Calcium_imaging_yarm_LurLab/mice_datasets/mice_params/mice_INIT_general_params_231024.csv', index=False)

# Initialize the new DataFrame with the desired columns
new_columns = ['mouseID', 'sessionID', 'bias', 'expert', 'enough_trials']
new_df = pd.DataFrame(columns=new_columns)

# Iterate through the rows of the original DataFrame 'df'
for index, row in df.iterrows():
    # Extract values from the original DataFrame 'df'
    mouseID = row['mouseID']
    sessionID = row['sessionID']
    per_lc = row['per_lc']
    per_rc = row['per_rc']
    behav = row['behav']
    nclean_trials = row['nclean_trials']

    # Calculate 'bias' based on the conditions
    bias = False
    if per_lc <= 0.5 or per_rc <= 0.5:
      if per_lc - per_rc > abs(0.4) or per_rc - per_lc > abs(0.4):  #0.25
        bias = True

    # Calculate 'expert' based on the conditions
    expert = 'NA'
    if 0.44 < behav < 0.56:
        expert = False
    if behav >= 0.70: #0.75
        expert = True

    # Calculate 'enough_trials' based on the conditions
    enough_trials = False
    if nclean_trials >= 20:
        enough_trials = True

    # Create a dictionary with the new information
    new_info = {
        'mouseID': mouseID,
        'sessionID': sessionID,
        'bias': bias,
        'expert': expert,
        'enough_trials': enough_trials
    }

    # Append the new information to the new DataFrame 'new_df'
    new_df = new_df.append(new_info, ignore_index=True)

new_df.to_csv(r'/content/drive/MyDrive/Calcium_imaging_yarm_LurLab/mice_datasets/mice_params/mice_INIT_TF_params_70_231012.csv', index=False)